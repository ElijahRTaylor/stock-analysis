Sub AllStocksAnalysisRefactored()    Dim startTime As Single    Dim endTime  As Single    yearValue = InputBox("What year would you like to run the analysis on?")    startTime = Timer        'Format the output sheet on All Stocks Analysis worksheet    Worksheets("All Stocks Analysis").Activate        Range("A1").Value = "All Stocks (" + yearValue + ")"        'Create a header row    Cells(3, 1).Value = "Ticker"    Cells(3, 2).Value = "Total Daily Volume"    Cells(3, 3).Value = "Return"    'Initialize array of all tickers    Dim tickers(12) As String        tickers(0) = "AY"    tickers(1) = "CSIQ"    tickers(2) = "DQ"    tickers(3) = "ENPH"    tickers(4) = "FSLR"    tickers(5) = "HASI"    tickers(6) = "JKS"    tickers(7) = "RUN"    tickers(8) = "SEDG"    tickers(9) = "SPWR"    tickers(10) = "TERP"    tickers(11) = "VSLR"        'Activate data worksheet    Worksheets(yearValue).Activate        'Get the number of rows to loop over    RowCount = Cells(Rows.Count, "A").End(xlUp).Row        '1a) Create a ticker Index    'We'll use the tickerindex variable to serve as the index for the arrays        Dim tickerindex As Integer    tickerindex = 0                    '1b) Create three output arrays    'To be consistent with the number in the tickers array, we have added12 for Volume, SP, & EP.        Dim tickerVolumes(12) As Long    Dim tickerStartingPrices(12) As Single    Dim tickerEndingPrices(12) As Single        ''2a) Create a for loop to initialize the tickerVolumes to zero.    'We created this loop outside of the loop that is going through the rows so that the volume for each new ticker will begin at 0 before the next loop begins.        Worksheets(yearValue).Activate    For i = 0 To 11        tickerVolumes(i) = 0        Next i            '2b) Loop over all the rows in the spreadsheet.            Worksheets(yearValue).Activate   'We assigned the number 2 to a variable just to provide clarity as to what the number represents        RowStart = 2        For j = RowStart To RowCount        '3a) Increase volume for current ticker    'We set a conditional inside of this for loop so that the stock volume number for a particular ticker is added to the tickerVolume for each element(ticker) in the array                If Cells(j, "A").Value = tickers(tickerindex) Then                tickerVolumes(tickerindex) = tickerVolumes(tickerindex) + Cells(j, "H").Value            End If        '3b) Check if the current row is the first row with the selected tickerIndex.    'We set another conditional that checks if the cell in the prior row is NOT equal to the current element (ticker) in the array.  If it's not, we assign the value to the corresponding element in our SP array.        If Cells(j - 1, "A").Value <> tickers(tickerindex) Then                tickerStartingPrices(tickerindex) = Cells(j, "F").Value           End If        '3c) Check if the current row is the last row with the selected ticker         'If the next row’s ticker doesn’t match, increase the tickerIndex.               'We set another conditional that checks if the cell in the prior row is NOT equal to the current element (ticker) in the array.  If it's not, we assign the value to the corresponding element in our EP array.        If Cells(j + 1, "A").Value <> tickers(tickerindex) Then                    tickerEndingPrices(tickerindex) = Cells(j, "F").Value  'Check Back Here to see if we should have entered either an i or j after starting prices            End If            '3d Increase the tickerIndex.        'If the cell in the next row is not equal to the current ticker, we will increase our tickerindex variable by 1            If Cells(j + 1, "A").Value <> Cells(j, "A").Value Then            tickerindex = tickerindex + 1                End If        Next j                '4) Loop through your arrays to output the Ticker, Total Daily Volume, and Return.      'Since each of our output arrays have 12 values stored in indexes from 0 to 11, we will create another For loop that goes from 0 to 11.        Worksheets("All Stocks Analysis").Activate    For i = 0 To 11        Cells(4 + i, "A").Value = tickers(i)        Cells(4 + i, "B").Value = tickerVolumes(i)        Cells(4 + i, "C").Value = tickerEndingPrices(i) / tickerStartingPrices(i) - 1            Next i        'Formatting    'We applied this formatting to the value on our output sheet.  For column B, we added formatting to include commas in the large values and for column C we changed the values to percentages    'We also applied auto fit to column B, to make the large sums completely visible        Worksheets("All Stocks Analysis").Activate    Range("A3:C3").Font.FontStyle = "Bold"    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous    Range("B4:B15").NumberFormat = "#,##0"    Range("C4:C15").NumberFormat = "0.0%"    Columns("B").AutoFit    dataRowStart = 4    dataRowEnd = 15    For i = dataRowStart To dataRowEnd        'In order to indicate whether a stock had a positive return, values in Column C will have a green interior if the value is positive and a red interior if the value is negative.                If Cells(i, "C") > 0 Then                        Cells(i, "C").Interior.Color = vbGreen                    Else                    Cells(i, "C").Interior.Color = vbRed                    End If            Next i  'This will record the end time the code took to run.  A message box will display showing the difference in time in sconds it took for the code to run.     endTime = Timer    MsgBox "This code ran in " & (endTime - startTime) & " seconds for the year " & (yearValue)End Sub